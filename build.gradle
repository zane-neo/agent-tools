/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext {
        opensearch_group = "org.opensearch"
        opensearch_version = System.getProperty("opensearch.version", "2.11.0-SNAPSHOT")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath "${opensearch_group}.gradle:build-tools:${opensearch_version}"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '6.22.0'
    id "io.freefair.lombok" version "8.0.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
}

allprojects {
    group 'org.opensearch.agent_tool'
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (buildVersionQualifier) {
        version += "-${buildVersionQualifier}"
    }
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }
}

targetCompatibility = JavaVersion.VERSION_11
sourceCompatibility = JavaVersion.VERSION_11

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'opensearch.repositories'
apply from: 'build-tools/opensearchplugin-coverage.gradle'


dependencies {
    compileOnly "org.opensearch.client:opensearch-rest-high-level-client:${opensearch_version}"
    compileOnly group: 'org.opensearch', name:'opensearch-ml-client', version: "${version}"
    implementation(group: 'opensearch-sql', name: 'opensearch-sql', version: "${version}") {
        exclude module: 'legacy'
        exclude module: 'prometheus'
        exclude module: 'datasources'
        exclude module: 'spark'
        exclude module: 'common'
        exclude module: 'core'
        exclude module: 'opensearch'
        exclude group: 'org.reflections', module: 'reflections'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.json', module: 'json'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-cbor'
    }
    compileOnly group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation "org.mockito:mockito-core:3.10.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.10.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "com.cronutils:cron-utils:9.1.6"
    testImplementation "commons-validator:commons-validator:1.7"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    compileOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.19.0"
    compileOnly group: 'org.json', name: 'json', version: '20230227'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed" // "started"
        showStandardStreams true
    }
}

spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'
        licenseHeaderFile 'spotless.license.java'

        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}


//task sourcesJar(type: Jar) {
//    archiveClassifier = 'sources'
//    from sourceSets.main.allJava
//}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    archiveClassifier = null
    from {
        configurations
                .runtimeClasspath
                .collect {
                    if(it.name.startsWith("opensearch-sql")
                    || it.name.startsWith("ppl.jar")
                    || it.name.startsWith("protocol.jar")) {
                        zipTree(it)
                    }
                }
    }
}

//shadowJar {
//    archiveClassifier = 'all'
//    exclude 'com/google'
//    exclude 'com/fasterxml/**'
//}

publishing {
    repositories {
        maven {
            name = 'staging'
            url = "${rootProject.buildDir}/local-staging-repo"
        }
        maven {
            name = "Snapshots"
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
    publications {
        customJar(MavenPublication) {
            groupId = 'org.opensearch'
            artifactId = 'agent-tools'
            artifact jar

            pom {
                name = "OpenSearch Agent Tools"
                packaging = "jar"
                url = "https://github.com/zane-neo/agent-tools"
                description = "OpenSearch Agent Tools"
                scm {
                    connection = "scm:git@github.com:zane-neo/agent-tools.git"
                    developerConnection = "scm:git@github.com:zane-neo/agent-tools.git"
                    url = "git@github.com:zane-neo/agent-tools.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "amazonwebservices"
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
            }
        }
    }

    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)
}

// updateVersion: Task to auto increment to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        // Include the required files that needs to be updated with new Version
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
